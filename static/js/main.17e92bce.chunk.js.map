{"version":3,"sources":["component/Bar.js","component/Table.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","Bar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","empList","id","name","email","phone","city","Table","useState","data","setData","align","columns","field","editable","onRowAdd","newRow","Promise","resolve","reject","updatedRows","Math","floor","random","setTimeout","onRowDelete","selectedRow","index","tableData","splice","onRowUpdate","updatedRow","oldRow","options","actionsColumnIndex","addRowPosition","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UAaMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,QAoCDK,MA/Bf,WACE,IAAMC,EAAUX,IAEhB,OAIE,yBAAKY,UAAWD,EAAQP,MAGtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQL,UAAWD,EAAQL,WAAYY,MAAM,UAAUC,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWD,EAAQF,OAA5C,mBAGA,kBAACa,EAAA,EAAD,CAAQJ,MAAM,UAAUG,QAAQ,YAAhC,a,2CC1CJE,EAAU,CACd,CAAEC,GAAI,EAAGC,KAAM,SAAUC,MAAO,mBAAoBC,MAAO,aAAcC,KAAM,SAC/E,CAAEJ,GAAI,EAAGC,KAAM,OAAQC,MAAO,iBAAkBC,MAAO,aAAcC,KAAM,UAC3E,CAAEJ,GAAI,EAAGC,KAAM,SAAUC,MAAO,sBAAuBC,MAAO,aAAcC,KAAM,cAClF,CAAEJ,GAAI,EAAGC,KAAM,UAAWC,MAAO,oBAAqBC,MAAO,aAAcC,KAAM,SACjF,CAAEJ,GAAI,EAAGC,KAAM,SAAUC,MAAO,sBAAuBC,MAAO,aAAcC,KAAM,eA4DrEC,MAzDf,WAAkB,IAAD,EAESC,mBAASP,GAFlB,mBAERQ,EAFQ,KAEFC,EAFE,KAYf,OACE,6BAEE,wBAAIC,MAAM,UAAV,cACA,wBAAIA,MAAM,UAAV,sCACA,kBAAC,IAAD,CACExB,MAAM,gBACNsB,KAAMA,EACNG,QAjBU,CACd,CAAEzB,MAAO,KAAM0B,MAAO,KAAMC,UAAU,GACtC,CAAE3B,MAAO,OAAQ0B,MAAO,QACxB,CAAE1B,MAAO,QAAS0B,MAAO,SACzB,CAAE1B,MAAO,eAAgB0B,MAAO,SAChC,CAAE1B,MAAO,OAAQ0B,MAAO,SAapBC,SAAU,CACRC,SAAU,SAACC,GAAD,OAAY,IAAIC,SAAQ,SAACC,EAASC,GAC1C,IAAMC,EAAW,sBAAOX,GAAP,cAAeP,GAAImB,KAAKC,MAAsB,IAAhBD,KAAKE,WAAoBP,KACxEQ,YAAW,WACTd,EAAQU,GACRF,MACC,SAELO,YAAa,SAAAC,GAAW,OAAI,IAAIT,SAAQ,SAACC,EAASC,GAChD,IAAMQ,EAAQD,EAAYE,UAAU1B,GAC9BkB,EAAW,YAAOX,GACxBW,EAAYS,OAAOF,EAAO,GAC1BH,YAAW,WACTd,EAAQU,GACRF,MACC,SAELY,YAAY,SAACC,EAAWC,GAAZ,OAAqB,IAAIf,SAAQ,SAACC,EAAQC,GACpD,IAAMQ,EAAMK,EAAOJ,UAAU1B,GACvBkB,EAAY,YAAIX,GACtBW,EAAYO,GAAOI,EACnBP,YAAW,WACTd,EAAQU,GACRF,MACC,UAIPe,QAAS,CACPC,oBAAqB,EAAGC,eAAgB,aC1CnCC,MAVf,WACA,OACI,oCACA,kBAAC,EAAD,MACD,kBAAC,EAAD,QCDiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17e92bce.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nfunction Bar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n\r\n\r\n\r\n    <div className={classes.root}>\r\n   \r\n    \r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n          Crud Operations\r\n          </Typography>\r\n          <Button color=\"inherit\" variant=\"outlined\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n      \r\n      \r\n    </div>\r\n    \r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Bar;","import React, { useState } from 'react';\r\nimport MaterialTable from 'material-table'\r\n\r\nconst empList = [\r\n  { id: 1, name: \"Hassan\", email: 'hassan@gmail.com', phone: 923046721523, city: \"Gojra\" },\r\n  { id: 2, name: \"Umar\", email: 'umar@gmail.com', phone: 923045866023, city: \"Lahore\" },\r\n  { id: 3, name: \"Sajjad\", email: 'sajjad342@gmail.com', phone: 923446625523, city: \"Faisalabad\" },\r\n  { id: 4, name: \"Shahbaz\", email: 'shahbaz@gmail.com', phone: 923157855546, city: \"Gojra\" },\r\n  { id: 5, name: \"Nabeel\", email: 'nabeel123@gmail.com', phone: 923455507035, city: \"Faisalabad\" },\r\n]\r\n\r\nfunction Table() {\r\n\r\n  const [data, setData] = useState(empList)\r\n  const columns = [\r\n    { title: \"ID\", field: \"id\", editable: false },\r\n    { title: \"Name\", field: \"name\" },\r\n    { title: \"Email\", field: \"email\" },\r\n    { title: \"Phone Number\", field: 'phone', },\r\n    { title: \"City\", field: \"city\", }\r\n  ]\r\n\r\n\r\n  return (\r\n    <div >\r\n   \r\n      <h2 align=\"center\">Assignment</h2>\r\n      <h4 align='center'>Material Table with CRUD operation</h4>\r\n      <MaterialTable\r\n        title=\"Students Data\"\r\n        data={data}\r\n        columns={columns}\r\n        editable={{\r\n          onRowAdd: (newRow) => new Promise((resolve, reject) => {\r\n            const updatedRows = [...data, { id: Math.floor(Math.random() * 100), ...newRow }]\r\n            setTimeout(() => {\r\n              setData(updatedRows)\r\n              resolve()\r\n            }, 2000)\r\n          }),\r\n          onRowDelete: selectedRow => new Promise((resolve, reject) => {\r\n            const index = selectedRow.tableData.id;\r\n            const updatedRows = [...data]\r\n            updatedRows.splice(index, 1)\r\n            setTimeout(() => {\r\n              setData(updatedRows)\r\n              resolve()\r\n            }, 2000)\r\n          }),\r\n          onRowUpdate:(updatedRow,oldRow)=>new Promise((resolve,reject)=>{\r\n            const index=oldRow.tableData.id;\r\n            const updatedRows=[...data]\r\n            updatedRows[index]=updatedRow\r\n            setTimeout(() => {\r\n              setData(updatedRows)\r\n              resolve()\r\n            }, 2000)\r\n          })\r\n\r\n        }}\r\n        options={{\r\n          actionsColumnIndex: -1, addRowPosition: \"first\"\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css';\nimport Bar from \"./component/Bar\"\nimport Table from \"./component/Table\"\n\n\n\n\nfunction App() {\nreturn (\n    <>\n    <Bar/>\n   <Table/>\n     \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}